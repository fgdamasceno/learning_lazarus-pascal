Lazarus + Free Pascal
YouTube -> SchoolFreeware
- Free Pascal Program Tutorials (Command Line Interface);
- Free Pascal App Tutorials (Window Type)

* Criar novo programa:
  Arquivo > Novo > Projeto > Programa
* Salvar programa:
  Arquivo > Salvar
* Construir programa:
  Executar > Construir --> Gera um executável (stand alone)

OBS.: o código fonte do programa fica em um arquivo com extensão .lpr,
      Lazarus Project Main Source

>>> ESCREVER NO CONSOLE:
* Printar na tela:
  write('texto'); --> escreve no console sem quebra de linhas
  writeln('texto'); --> escreve na tela com quebra de linhas
  OBS.: uma string deve estar entre 'aspas simples'!
  OBS.: ao executar um programa com o comando acima, uma tela do console irá se
        abrir, exibir o texto e fechar automaticamente. Para evitar isso, 
        mantendo a tela aberta, temos que usar o comando abaixo na sequência:
  readln; --> recebe uma entrada do usuário e também impede que a janela se feche,
              até que a tecla <ENTER> seja apertada.
  OBS.: não utilizar acentos gráficos ou letras que não existam na língua inglesa!

EXEMPLO BÁSICO DE CÓDIGO:
+----------------------------------------+
program learningprogram001;

{$mode objfpc}{$H+}

uses
  {$IFDEF UNIX}
  cthreads,
  {$ENDIF}
  Classes
  { you can add units after this };

var nome: string;

begin
  writeln('Digite o seu nome: ');
  readln(nome);
  writeln('Ola, ', nome, '!');
  readln;
end.
+----------------------------------------+

>>> MATEMÁTICA BÁSICA
* Operadores matemáticos:
  +, -, *, /, div (divisão de inteiros), mod (resto da divisão)
* Ordem de operações:
  parenteses, exponentes, multiplicação, divisão, adição, subtração
  OBS.: por padrão, Pascal retorna notação científica após divisão.
        Ex.: 10/2 = 5.0000000000000000E+000
             10/3 = 3.3333333333333335E+000
        Para evitar isto, utiliza-se as seguintes notações:
        10/3:0:2 = 3.33 (10 dividido por 3 com 0 espaço à direita e 2 casas decimais)
        10/3:5:2 =  3.33 (10 dividido por 3 com 1 espaço à direita e 2 casas decimais)
        OBS.: como o resultado é alinhado à direita, o número 5 representa um espaço
              antes do resultado, pois 3.33 tem 4 caracteres, e para termos o espaço,
              que totalizariam 5 caracteres, adicionamos o número 5 após o divisor.
  OBS.: uso de 'mod' e 'div'
        --> mod: 10 mod 3 (resultado: exibe o resto da operação)
        --> div: 10 div 3 (resultado: exibe quantas vezes um número é divisível pelo
                          divisor)

>>> VARIÁVEIS E TIPOS DE DADOS
* Declaração de variáveis:
  - A variável é declarada e tipada antes da palavra-chave 'begin';
  - Usá-se a palavra chave var, pulá-se para a próxima linha, digitá-se o nome da variável
  seguido de dois pontos (:) e o tipo de dado que será armazenado nesta variável e 
  finalizá-se com ponto-e-vírgula (;);
  - Nome de variáveis não podem ser iniciados com números;
  - O valor será atribuído à variável após a palavra-chave 'begin' no código;
    OBS.: begin -> início do código; end -> final do código.
  - Para atribuir um valor à variável, digitá-se o nome da variável seguido de dois-pontos
  mais o operador de atribuição (:= [operador de atribuição]) seguido do valor que será atribuído à variável. Valor
  do tipo 'string' deve ser digitado entre aspas simples (' ');
  - Variáveis podem ter seus valores reatribuídos;
  
* Tipos de dados:
  Integer, Real (float), String, Char, Boolean

>>> ENTRADAS PELO USUÁRIO
  Uma forma prática para receber dados do usuário é solicitando que o mesmo insira dados (write();
  ou writeln();) e receber os dados digitados (readln();) e atribuir estes dados à variáveis.

EXEMPLO BÁSICO DE CÓDIGO:
+----------------------------------------+
program userinput;

{$mode objfpc}{$H+}

uses
  {$IFDEF UNIX}
  cthreads,
  {$ENDIF}
  Classes
  { you can add units after this };

var // DECLARACAO DAS VARIAVEIS
  fname:string;
  lname:string;
  num1:integer;
  num2:integer;

begin
  write('Enter first name: '); // SOLICITACAO DE DADOS DO USUARIO
  readln(fname); // RECEBIMENTO E ATRIBUICAO DE DADOS A VARIAVEIS
  write('Enter last name: ');
  readln(lname);
  writeln;
  writeln('Nice to meet you ', fname, ' ', lname, '.');
  write('Enter first integer: ');
  readln(num1);
  write('Enter second integer: ');
  readln(num2);
  writeln;
  writeln('The sum of the integers: ', num1 + num2);
  writeln;

  writeln('Press <Enter> to quit!');
  readln;
end.
+----------------------------------------+

ESTRUTURA DE DECISÃO - IF ELSE STATEMENTS
* Operadores relacionais:
  <, <=, >, >=, = (igual a; ':=' é o operador de atribuição), <> (not equal);
* Serão criados dentro IF ELSE 'begin' e 'end' onde serão declarados' o código que será executado quando
  uma opção for verdadeira será escrito entre 'begin' e 'end';
  SINTAXE:
    begin
      if <condition> then
      begin
        do something
      end
      else if <condition> then
      begin
        do something
      end
      else
      begin
        do something
      end;
    end.
* O código pode ter apenas um 'if', vários 'else if', porém somente um 'else';

EXEMPLO BÁSICO DE CÓDIGO:
+----------------------------------------+
program ifstatements;

{$mode objfpc}{$H+}

uses
  {$IFDEF UNIX}
  cthreads,
  {$ENDIF}
  Classes
  { you can add units after this };

var
  first_name:string;
  last_name:string;
  birth_year:integer;
  this_year:integer;



begin
  this_year := 2025;

  write('Write you first name: ');
  readln(first_name);
  write('Write your last name: ');
  readln(last_name);
  write('Year of birth: ');
  readln(birth_year);
  writeln;
  writeln('Welcome ', first_name, ' ', last_name, '!');
  writeln('You are ', this_year - birth_year, ' years old.');

  if this_year - birth_year <= 19 then
  begin
    writeln('You are still a teenager!');
  end
  else if this_year - birth_year <= 59 then
  begin
    writeln('You are now an adult!');
  end
  else
  begin
    writeln('You are an elderly person.');
  end;

  writeln;
  writeln('Type <Enter> to quit.');

  readln;
end.
+----------------------------------------+

CASE STATEMENTS
* Caracteristicas: Similar ao 'if statement'; de leitura mais fácil; entendimento mais
  fácil; compacto; pode ser mais rápido que o 'if statement'; não aceita variáveis do tipo
  string.
  SINTAXE:
    case <variable> of
    condition:begin
        do something
      end;
    end;
* A condição não aceita comparação. Para selecionar valores que estejam dentro de um
  intervalo, utilizá-se '..', como em 0..10 (entre 0 e 10)
    Ex.:
      case valor of
      0..10:begin
          writeln('Valor entre 0 e 10');
        end;
      11..20:begin
          writeln('Valor entre 10 e 20');
        end;
      end;
* Para casos com letras, podemos utilizar da seguinte forma, pois o usuário pode digitar
  de ambas maneiras:
    Ex.:
      (...)
      'A','a':begin // o usuário pode digitar 'A' ou 'a'
         (...)
        end;
* Aceita else:
    Ex.: 
      (...)
        end;
      else begin
        writeln('Something');
      end;

EXEMPLO BÁSICO DE CÓDIGO:
+----------------------------------------+
program casestatements;

{$mode objfpc}{$H+}

uses
  {$IFDEF UNIX}
  cthreads,
  {$ENDIF}
  Classes
  { you can add units after this };

var
  hora:integer;

begin

  write('Que horas sao (Ex.: 10)? ');
  readln(hora);

  case hora of
  0..11:begin
    writeln('Bom dia!');
    end;
  12..17:begin
    writeln('Boa tarde!');
    end;
  18..23:begin
    writeln('Boa noite!');
    end;
  else begin
    writeln('Nao foi digitado um valor valido');
    end
  end;

  writeln;
  writeln('Press <Enter> to quit.');
  readln;
end.
+----------------------------------------+

WHILE LOOP
* SINTAXE:
    while <condition> do
    begin
      do something
      incremento/decremento
    end;
* Aceita operadores relacionais (<, <=, >, >=, = (igual a; ':=' é o operador de atribuição), <> (not equal));

EXEMPLO BÁSICO DE CÓDIGO:
+----------------------------------------+
program whileloop;

{$mode objfpc}{$H+}

uses
  {$IFDEF UNIX}
  cthreads,
  {$ENDIF}
  Classes
  { you can add units after this };
var
  counter:integer;


begin

  counter := 1;

  while counter < 11 do
  begin
    writeln(counter);
    counter := counter + 1;
  end;

  writeln;

  counter := 10;

  while counter > 0 do
  begin
    writeln(counter);
    counter := counter - 1;
  end;

  writeln;
  writeln('Press <Enter> to quit.');
  readln;
end.
+----------------------------------------+

  



